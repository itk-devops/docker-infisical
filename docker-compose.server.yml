# itk-version: 3.2.1
networks:
  frontend:
    external: true
  app:
    driver: bridge
    internal: false

services:
  nginx:
    image: nginxinc/nginx-unprivileged:alpine
    restart: unless-stopped
    networks:
      - app
      - frontend
    depends_on:
      - infisical
    volumes:
      - ./.docker/templates:/etc/nginx/templates:ro
      - ./.docker/nginx.conf:/etc/nginx/nginx.conf:ro
      - .:/app
    environment:
      NGINX_FPM_SERVICE: ${COMPOSE_PROJECT_NAME}-phpfpm-1:9000
      NGINX_WEB_ROOT: /app/web
      NGINX_PORT: 8080
      NGINX_MAX_BODY_SIZE: 5M
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=frontend"
      - "traefik.http.routers.${COMPOSE_PROJECT_NAME}-http.rule=Host(`${COMPOSE_SERVER_DOMAIN}`)"
      - "traefik.http.routers.${COMPOSE_PROJECT_NAME}-http.entrypoints=web"
      - "traefik.http.routers.${COMPOSE_PROJECT_NAME}-http.middlewares=redirect-to-https"
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
      - "traefik.http.routers.${COMPOSE_PROJECT_NAME}.rule=Host(`${COMPOSE_SERVER_DOMAIN}`)"
      - "traefik.http.routers.${COMPOSE_PROJECT_NAME}.entrypoints=websecure"

  infisical:
    image: infisical/infisical:latest-postgres
    ports:
      - "8080"
    environment:
      - NODE_ENV=production
    env_file:
      - path: ./.infisical.env
        required: true # default
      - path: ./.infisical.local.env
        required: false
    networks:
      - app
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
      db-migration:
        condition: service_completed_successfully

  redis:
    image: redis:7-alpine
    environment:
      - ALLOW_EMPTY_PASSWORD=yes
    env_file:
      - path: ./.infisical.env
        required: true # default
      - path: ./.infisical.local.env
        required: false
    ports:
      - "6379"
    networks:
      - app
    volumes:
      - .docker/data/redis:/data

  db:
    image: postgres:14-alpine
    env_file:
      - path: ./.infisical.env
        required: true # default
      - path: ./.infisical.local.env
        required: false
    healthcheck:
      test: "pg_isready --username=${POSTGRES_USER} && psql --username=${POSTGRES_USER} --list"
      interval: 5s
      timeout: 10s
      retries: 10
    networks:
      - app
    volumes:
      - .docker/data/postgresql:/var/lib/postgresql/data

  db-migration:
    image: infisical/infisical:latest-postgres
    command: npm run migration:latest
    env_file:
      - path: ./.infisical.env
        required: true # default
      - path: ./.infisical.local.env
        required: false
    networks:
      - app
    depends_on:
      db:
        condition: service_healthy
